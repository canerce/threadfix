var threadfixModule = angular.module('threadfix');

threadfixModule.controller("VulnerabilityFiltersController", function($rootScope, $scope, $http, $log, $modal, tfEncoder, customSeverityService) {

    var nameCompare = function(a,b) {
        return a.sourceGenericVulnerability.name.localeCompare(b.sourceGenericVulnerability.name);
    };

    var toStrings = function(severityFilter) {
        for (var key in severityFilter) {
            if (severityFilter.hasOwnProperty(key) && key.toString().substring(0,4) === "show") { // to make IntelliJ happy
                if (severityFilter[key] === true) {
                    severityFilter[key] = "true";
                }

                if (severityFilter[key] === false) {
                    severityFilter[key] = "false";
                }
            }
        }

        return severityFilter;
    };

    var toBooleans = function(severityFilter) {
        for (var key in severityFilter) {
            if (severityFilter.hasOwnProperty(key) && key.toString().substring(0,4) === "show") { // to make IntelliJ happy
                if (severityFilter[key] === "true") {
                    severityFilter[key] = true;
                }

                if (severityFilter[key] === "false") {
                    severityFilter[key] = false;
                }
            }
        }

        return severityFilter;
    };

    $scope.$watch('csrfToken', function(){
        if ($rootScope.csrfToken) {
            $http.get(tfEncoder.encodeRelative('filters/map')).
                success(function(data, status, headers, config) {

                    if (data.success) {
                        $scope.application = data.object.application;
                        $scope.organization = data.object.organization;

                        $scope.type = data.object.type;
                        $scope.originalType = data.object.originalType;

                        $scope.genericSeverities = data.object.genericSeverities;
                        customSeverityService.setSeverities($scope.genericSeverities);
                        $scope.genericVulnerabilities = data.object.genericVulnerabilities;

                        $scope.vulnerabilityFilter  = data.object.vulnerabilityFilter;
                        $scope.globalSeverityFilter = data.object.globalSeverityFilter;
                        $scope.globalVulnerabilityFilterList = data.object.globalVulnerabilityFilterList;

                        if ($scope.type !== 'Global') {
                            $scope.teamVulnerabilityFilters = data.object.teamVulnerabilityFilters;
                            $scope.teamSeverityFilter = data.object.teamSeverityFilter;
                        }

                        if ($scope.type === 'Application') {
                            $scope.applicationVulnerabilityFilters = data.object.applicationVulnerabilityFilters;
                            $scope.applicationSeverityFilter = data.object.applicationSeverityFilter;
                        }

                        $scope.setTab(data.object.type);
                    } else {
                        $scope.errorMessage = "Failure. Message was : " + data.message;
                    }

                    $scope.initialized = true;
                }).
                error(function(data, status, headers, config) {
                    $scope.initialized = true;
                    $scope.errorMessage = "Failed to retrieve map. HTTP status was " + status;
                });
        }
    });

    $scope.setTab = function(tab) {
        $scope.type = tab;

        $scope.severitySuccessMessage = undefined;
        $scope.severityErrorMessage = undefined;

        if (tab === 'Global') {
            $scope.vulnFiltersTitle = 'Global Vulnerability Filters';
            $scope.severityFiltersTitle = 'Global Severity Filters';
            $scope.severityFilter = toStrings($scope.globalSeverityFilter);
            $scope.vulnerabilityFilterList = $scope.globalVulnerabilityFilterList;
            $scope.submitRoot = "/configuration/filters/";

        } else if (tab === 'Applications' || tab === 'Application') {
            $scope.vulnFiltersTitle = 'Application Vulnerability Filters';
            $scope.severityFiltersTitle = 'Application Severity Filters';
            $scope.severityFilter = toStrings($scope.applicationSeverityFilter);
            $scope.vulnerabilityFilterList = $scope.applicationVulnerabilityFilters;
            $scope.submitRoot = "/organizations/" + $scope.organization.id + "/applications/" + $scope.application.id + "/filters/";
        } else {
            $scope.severityFiltersTitle = 'Team Severity Filters';
            $scope.vulnFiltersTitle = 'Team Vulnerability Filters';
            $scope.severityFilter = toStrings($scope.teamSeverityFilter);
            $scope.vulnerabilityFilterList = $scope.teamVulnerabilityFilters;
            if ($scope.type === 'Team') {
                $scope.submitRoot = "filters/";
            } else {
                var regex = /(\/organizations\/[0-9]+\/)/
                $scope.submitRoot = regex.exec(window.location.pathname)[0] + "filters/"
            }
        }

        if ($scope.vulnerabilityFilterList && $scope.vulnerabilityFilterList.length > 0) {
            $scope.vulnerabilityFilterList.sort(nameCompare);
            $scope.currentVulnFilters = $scope.vulnerabilityFilterList;
        } else {
            $scope.currentVulnFilters = undefined;
        }

    }

    $scope.showNewFilterModal = function() {
        var modalInstance = $modal.open({
            windowClass: 'filter-modal',
            templateUrl: 'vulnerabilityFilterForm.html',
            controller: 'ModalControllerWithConfig',
            resolve: {
                url: function() {
                    return tfEncoder.encode($scope.submitRoot + "new");
                },
                object: function () {
                    return {
                        targetGenericSeverity: {
                            id: 5
                        }
                    }
                },
                config: function() {
                    return {
                        showDelete: false,
                        title: 'New Filter',
                        genericVulnerabilities: $scope.genericVulnerabilities,
                        genericSeverities: $scope.genericSeverities
                    }
                },
                buttonText: function() {
                    return "Create Filter";
                }
            }
        });

        modalInstance.result.then(function (newFilter) {

            if (!$scope.currentVulnFilters) {
                $scope.currentVulnFilters = [];
            }

            $scope.currentVulnFilters.push(newFilter);

            $scope.currentVulnFilters.sort(nameCompare);

            if ($scope.type === 'Global') {
                $scope.successMessage = "Successfully added global filter " + newFilter.id +
                    ". ThreadFix is updating all vulnerabilities in the background. It may take a few minutes to finish.";
            } else
                $scope.successMessage = "Successfully added filter " + newFilter.id;

        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    }

    $scope.editFilter = function(filter) {
        var modalInstance = $modal.open({
            windowClass: 'filter-modal',
            templateUrl: 'vulnerabilityFilterForm.html',
            controller: 'ModalControllerWithConfig',
            resolve: {
                url: function() {
                    return tfEncoder.encode($scope.submitRoot + filter.id + "/edit");
                },
                object: function () {
                    var filterCopy = angular.copy(filter);
                    return filterCopy;
                },
                config: function() {
                    return {
                        showDelete: true,
                        title: 'Edit Filter',
                        genericVulnerabilities: $scope.genericVulnerabilities,
                        genericSeverities: $scope.genericSeverities
                    }
                },
                buttonText: function() {
                    return "Save Changes";
                },
                deleteUrl: function() {
                    return tfEncoder.encode($scope.submitRoot + filter.id + "/delete");
                }
            }
        });

        modalInstance.result.then(function (newFilter) {

            if (newFilter) {
                filter.targetGenericSeverity = newFilter.targetGenericSeverity;
                filter.sourceGenericVulnerability = newFilter.sourceGenericVulnerability;
                if ($scope.type === 'Global') {
                    $scope.successMessage = "Successfully edited global filter " + newFilter.id +
                        ". ThreadFix is updating all vulnerabilities in the background. It may take a few minutes to finish.";
                } else
                    $scope.successMessage = "Successfully edited filter " + newFilter.id;
            } else {
                var index = $scope.currentVulnFilters.indexOf(filter);

                if (index > -1) {
                    $scope.currentVulnFilters.splice(index, 1);
                }

                if ($scope.currentVulnFilters.length === 0) {
                    $scope.currentVulnFilters = undefined;
                }

                if ($scope.type === 'Global') {
                    $scope.successMessage = "Successfully deleted global filter " + filter.id +
                        ". ThreadFix is updating all vulnerabilities in the background. It may take a few minutes to finish.";
                } else
                    $scope.successMessage = "Successfully deleted filter " + filter.id;
            }
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    }

    $scope.submitSeverityFilterForm = function() {
        $scope.submittingSeverityFilter = true;

        $scope.severitySuccessMessage = undefined;
        $scope.severityErrorMessage = undefined;

        $http.post(tfEncoder.encode($scope.submitRoot + 'severityFilter/set'), toBooleans($scope.severityFilter)).
            success(function(data, status, headers, config) {

                if (data.success) {
                    if ($scope.type === 'Global') {
                        $scope.severitySuccessMessage = "Successfully saved filter settings. " +
                            "ThreadFix is updating all vulnerabilities in the background. It may take a few minutes to finish.";
                    } else
                        $scope.severitySuccessMessage = "Successfully saved filter settings.";
                } else {
                    $scope.severityErrorMessage = "Failure. Message was : " + data.message;
                }

                $scope.submittingSeverityFilter = false;
            }).
            error(function(data, status, headers, config) {
                $scope.submittingSeverityFilter = false;
                $scope.severityErrorMessage = "Failed to retrieve map. HTTP status was " + status;
            });

        toStrings($scope.severityFilter);
    };

    $scope.goToTeam = function(team) {
        window.location.href = tfEncoder.encode("/organizations/" + team.id);
    };

    $scope.goToApp = function(team, app) {
        window.location.href = tfEncoder.encode("/organizations/" + team.id + "/applications/" + app.id);
    };

});

