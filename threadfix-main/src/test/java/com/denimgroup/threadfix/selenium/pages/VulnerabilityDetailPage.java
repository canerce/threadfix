////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.selenium.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;

public class VulnerabilityDetailPage extends BasePage{

	public VulnerabilityDetailPage(WebDriver webdriver) {
		super(webdriver);
	}

    //===========================================================================================================
    // Action Methods
    //===========================================================================================================
	
    public VulnerabilityDetailPage clickAddComment() {
        driver.findElementByLinkText("Add Comment").click();
        waitForElement(By.id("commentInputBox"));
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickSubmitComment() {
        driver.findElementById("submit").click();
        sleep(10000);
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickEditFinding() {
        driver.findElementById("editLink").click();
        sleep(1000);
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage setCommentText(String commentText) {
        driver.findElementById("commentInputBox").clear();
        driver.findElementById("commentInputBox").sendKeys(commentText);
        sleep(5000);
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage setCwe(String cwe) {
        driver.findElementById("txtSearch").clear();
        driver.findElementById("txtSearch").sendKeys(cwe);
        return this;
    }

    public VulnerabilityDetailPage setDescription(String description) {
        driver.findElementById("descriptionInput").clear();
        driver.findElementById("descriptionInput").sendKeys(description);
        return this;
    }

    public VulnerabilityDetailPage setParameter(String parameter) {
        driver.findElementById("parameterInput").clear();
        driver.findElementById("parameterInput").sendKeys(parameter);
        return this;
    }

    public VulnerabilityDetailPage clickCloseVulnerabilityButton() {
        driver.findElementById("actionItems").click();
        driver.findElementById("closeVulnerabilityLink").click();
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickOpenVulneranilityButton() {
        driver.findElementById("actionItems").click();
        driver.findElementById("openVulnerabilityLink").click();
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickMarkasFalsePositivebutton() {
        driver.findElementById("actionItems").click();
        driver.findElementById("markFalsePositiveLink").click();
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickUnmarkFalsePositive() {
        driver.findElementById("actionItems").click();
        driver.findElementById("unmarkFalsePositiveLink").click();
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickAddFileButton() {
        driver.findElementById("uploadDocVulnModalLink").click();
        waitForElement(By.id("docFileInput"));
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage uploadFile(String fileName) {
        driver.findElementById("docFileInput").sendKeys(fileName);
        sleep(5000);
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickDeleteFileButton() {
        driver.findElementByLinkText("Delete").click();
        handleAlert();
        waitForElement(By.id("wafTableBody"));
        return new VulnerabilityDetailPage(driver);
    }

    public ApplicationDetailPage clickApplicationLink(String appName) {
        driver.findElementByLinkText("Application: " + appName).click();
        return new ApplicationDetailPage(driver);
    }

    public FindingDetailPage clickViewFinding() {
        driver.findElementById("viewLink").click();
        return new FindingDetailPage(driver);
    }

    public VulnerabilityDetailPage setCommentTag(String tagName) {
        driver.findElementById("comment0TagsButton").click();
        driver.findElementById(tagName).click();
        driver.findElementById("comment0TagsButton").click();
        driver.findElementById("updateBtn0").click();
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage toggleVulnInfoSection() {
        driver.findElementById("scannerName0").click();
        return new VulnerabilityDetailPage(driver);
    }

    public VulnerabilityDetailPage clickActionMenu() {
        driver.findElementById("actionItems").click();
        return new VulnerabilityDetailPage(driver);
    }

    //===========================================================================================================
    // Boolean Methods
    //===========================================================================================================

    public boolean isTextPresentOnPage(String stringPresent) {
        return driver.findElementByClassName("inputValue").getText().contains(stringPresent);
    }

    public boolean isCommentAvailable(String comment) {
        String temp = driver.findElementById("commentText0").getText().trim();
        return temp.equals(comment);
    }

    public boolean isErrorMessageDisplayed(String errorMessage) {
        return driver.findElementById("errorSpan").getText().contains(errorMessage);
    }

    public boolean isSubmitCommentButtonEnabled() {
        return driver.findElementsByCssSelector("#submit.disabled").isEmpty();
    }

    public boolean isFileNameDisplay() {
        return driver.findElementById("name0").getText().trim().equals("snort_log");
    }

    public boolean isFileBoxEmpty() {
        return driver.findElementById("wafTableBody").getText().trim().equals("No files found.");
    }

    public boolean isVulnerabilityDataPresent() {
        return driver.findElementById("scannerName0").isDisplayed();
    }

    public boolean isCweDataPresent() {
        return driver.findElementById("cweLink").isDisplayed();
    }

    public boolean isVulnInfoExpanded() {
        return driver.findElementById("viewLink").isDisplayed();
    }

    public boolean isVulnHistoryPresent() {
        try {
            return driver.findElementById("vulnerabilitiesHistory").isDisplayed();
        } catch (NoSuchElementException e) {
            return false;
        }
    }

    public boolean isUploadFileButtonPresent() {
        try {
            return driver.findElementById("uploadDocVulnModalLink").isDisplayed();
        } catch (NoSuchElementException e) {
            return false;
        }
    }

    public boolean isActionMenuPresent() {
        try {
            return driver.findElementById("actionItems").isDisplayed();
        } catch (NoSuchElementException e) {
            return false;
        }
    }

    public boolean isAddCommentButtonPresent() {
        try {
            return driver.findElementById("addCommentButton").isDisplayed();
        } catch (NoSuchElementException e) {
            return false;
        }
    }

    public boolean isCreateDefectPresent() {
        return isElementPresent(By.linkText("Create Defect"));
    }

    public boolean isAddToExistingDefectPresent() {
        return isElementPresent(By.linkText("Add to Existing Defect"));
    }
}
