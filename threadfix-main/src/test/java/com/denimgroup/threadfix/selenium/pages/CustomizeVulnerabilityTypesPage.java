////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.selenium.pages;

import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.List;

public class CustomizeVulnerabilityTypesPage extends BasePage {

    public CustomizeVulnerabilityTypesPage(WebDriver webDriver) {
        super(webDriver);
    }

    //===========================================================================================================
    // Vulnerability Mapping
    //===========================================================================================================

    public CustomizeVulnerabilityTypesPage clickCreateNewFilter() {
        WebDriverWait wait = new WebDriverWait(driver, 60);
        wait.until(ExpectedConditions.visibilityOf(driver.findElementById("createNewKeyModalButton")));
        driver.findElementById("createNewKeyModalButton").click();
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    public CustomizeVulnerabilityTypesPage setVulnerabilityType(String vulnerabilityType) {
        waitForElement(By.id("sourceGenericVulnerability.name"));
        driver.findElementById("sourceGenericVulnerability.name").sendKeys(vulnerabilityType);
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    public CustomizeVulnerabilityTypesPage setSeverity(String severity) {
        new Select(driver.findElementById("targetGenericSeverity.id")).selectByVisibleText(severity);
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    public CustomizeVulnerabilityTypesPage clickAddFilter() {
        driver.findElementById("submit").click();
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    public CustomizeVulnerabilityTypesPage addVulnerabilityFilter(String vulnerabilityType, String severity) {
        setVulnerabilityType(vulnerabilityType)
                .setSeverity(severity)
                .clickAddFilter();
        sleep(1500);
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    public CustomizeVulnerabilityTypesPage deleteFilter() {
        driver.findElementById("edit0").findElement(By.className("btn")).click();
        driver.findElementById("deleteButton").click();

        Alert alert = driver.switchTo().alert();
        alert.accept();

        waitForElement(By.className("alert-success"));
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    public CustomizeVulnerabilityTypesPage closeSuccessNotification() {
        try {
            driver.findElementByClassName("close").click();
        } catch (ElementNotVisibleException e) {
            List<WebElement> elements = driver.findElementsByClassName("close");
            for (WebElement element : elements) {
                if (element.isDisplayed()) {
                    element.click();
                    break;
                }
            }
        }
        return new CustomizeVulnerabilityTypesPage(driver);
    }

    //===========================================================================================================
    // Helper Methods
    //===========================================================================================================

    public CustomizeVulnerabilityTypesPage waitForChanges() {
        sleep(300000);
        return this;
    }

    //===========================================================================================================
    // Boolean Methods
    //===========================================================================================================

    public boolean isCreateNewFilterPresent() {
        return driver.findElementById("createNewKeyModalButton").isDisplayed();
    }

    public boolean isSuccessMessagePresent() {
        return driver.findElementsById("vulnFiltersSuccessMessage").size() != 0;
    }

    public boolean isVulnerabilityTypeFound() {
        return driver.findElementsById("genericVulnerabilityNameError").size() == 0;
    }

    public boolean isAccessDenied() {
        return driver.findElementById("main-content").getText().contains("Access Denied");
    }

    public boolean isCustomTextTabPresent() {
        return isElementPresent(By.linkText("Custom Text"));
    }

    public boolean isSeverityMappingsTabPresent() {
        return isElementPresent(By.linkText("Severity Mappings"));
    }
}
